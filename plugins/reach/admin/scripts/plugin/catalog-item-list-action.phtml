<p><?php echo $this->translate('Here you can configure your Catalog items'); ?></p>
<?php echo $this->filterForm; ?>
<?php echo $this->newCatalogItemFolderForm; ?>
<div id="catalog_item_list_div" class="clear">
	<table>
		<thead>
		<tr>
			<th><?php echo $this->translate('ID'); ?></th>
			<th><?php echo $this->translate('Status'); ?></th>
			<th><?php echo $this->translate('Name'); ?></th>
			<th><?php echo $this->translate('Publisher ID'); ?></th>
			<th><?php echo $this->translate('Vendor Partner ID'); ?></th>
			<th><?php echo $this->translate('Type'); ?></th>
			<th><?php echo $this->translate('System Name'); ?></th>
			<th><?php echo $this->translate('Creation Date'); ?></th>
			<th><?php echo $this->translate('Last Updated Date'); ?></th>
			<th><?php echo $this->translate('Action'); ?></th>
		</tr>
		</thead>
		<tfoot>
		<tr>
			<td colspan="12">
				<?php echo $this->paginator; ?>
			</td>
		</tr>
		</tfoot>
		<tbody>
		<?php foreach($this->paginator as /* Kaltura_Client_Reach_Type_VendorCatalogItem */ $catalogItem): ?>
			<tr class="<?php echo $this->cycle(array('odd', 'even'))->next(); ?>">
				<td><?php echo $catalogItem->id; ?></td>
				<td><?php echo $this->enumTranslate('Kaltura_Client_Reach_Enum_VendorCatalogItemStatus', $catalogItem->status); ?></td>
				<td><?php echo $catalogItem->name; ?></td>
				<td><?php echo $catalogItem->partnerId; ?></td>
				<td><?php echo $catalogItem->vendorPartnerId; ?></td>
				<td><?php $a= $catalogItem->getKalturaObjectType(); $a = str_replace('KalturaVendor', '', $a); $a = str_replace('CatalogItem', '', $a); echo $a ?></td>
				<td><?php echo $catalogItem->systemName; ?></td>
				<td><?php echo date($this->translate('time format'), $catalogItem->createdAt); ?></td>
				<td><?php echo date($this->translate('time format'), $catalogItem->updatedAt); ?></td>
				<td>
					<select class="options" onchange="doAction(this.value, <?php echo $catalogItem->id;?>, <?php echo $catalogItem->partnerId; ?>)">
						<option value=""><?php echo $this->translate('Select Action'); ?></option>
						<option value="configureCatalogItem" ><?php echo $this->translate('Configure'); ?></option>
						<?php if ($catalogItem->status === Kaltura_Client_Reach_Enum_VendorCatalogItemStatus::DISABLED): ?>
							<option value="enable" ><?php echo $this->translate('Enable'); ?></option>
						<?php elseif ($catalogItem->status === Kaltura_Client_Reach_Enum_VendorCatalogItemStatus::ACTIVE): ?>
							<option value="disable" ><?php echo $this->translate('Disable'); ?></option>
						<?php endif; ?>
						<option value="remove" ><?php echo $this->translate('Remove'); ?></option>
					</select>
				</td>
			</tr>
		<?php endforeach; ?>
		</tbody>
	</table>
</div>

<script type="text/javascript">
	$(function(){
		addSubTitle('Catalog Items');
		switchTemplatesBoxForServiceFeature();
	});

	jQuery('#filter_type').change(function() {
		if(this.value == "none") {
			$("#filter_text").css("display","none");
		}
		else {
			$("#filter_text").css("display","inline");
			$("#filter_text input").focus();
			if(this.value == "free")
				$("div.help").show();
			else
				$("div.help").hide();
		}
	});

	jQuery('#filter_type').change();

	function doAction(action, folderId) {
		if (action && eval('typeof ' + action) == 'function')
		{
			f = eval(action);
			Array.prototype.shift.apply(arguments);
			f.apply(this, arguments);
		}
		jQuery('select.options').val('');
	}

	var templates = <?php echo json_encode($this->templates); ?>;
	var templatesByServiceFeature = [];
	var templatesByServiceType = [];

	function switchTemplatesBoxForServiceFeature() {
		var filteredTemplates = [];
		jQuery('#cloneTemplateId').find('option').remove();

		var templateServiceFeature = jQuery('#cloneTemplateServiceFeature').val();
		if(templateServiceFeature == null)
			return;

		for(var i = 0; i < templates.length; i++){
			if(templates[i].serviceFeature == templateServiceFeature)
			{
				jQuery('#cloneTemplateId').append('<option value="' + templates[i].id + '">' + templates[i].systemName + '</option>');
				filteredTemplates.push(templates[i]);
			}
		}
		templatesByServiceFeature = filteredTemplates;
	}

	function switchTemplatesBoxByServiceType() {
		var filteredTemplates = [];
		jQuery('#cloneTemplateId').find('option').remove();

		var templateServiceType = jQuery('#cloneTemplateServiceType').val();
		if(templateServiceType == null)
			return;

		for(var i = 0; i < templatesByServiceFeature.length; i++){
			if(templatesByServiceFeature[i].serviceType == templateServiceType)
			{
				jQuery('#cloneTemplateId').append('<option value="' + templatesByServiceFeature[i].id + '">' + templatesByServiceFeature[i].systemName + '</option>');
				filteredTemplates.push(templatesByServiceFeature[i]);
			}
		}
		templatesByServiceType = filteredTemplates;
	}

	function switchTemplatesBoxByTurnAround() {
		jQuery('#cloneTemplateId').find('option').remove();

		var templateTurnAroundTime = jQuery('#cloneTemplateTurnAround').val();
		if(templateTurnAroundTime == null)
			return;

		for(var i = 0; i < templatesByServiceType.length; i++){
			if(templatesByServiceType[i].turnAroundTime == templateTurnAroundTime)
			{
				jQuery('#cloneTemplateId').append('<option value="' + templatesByServiceType[i].id + '">' + templatesByServiceType[i].systemName + '</option>');
			}
		}
	}

	function enable(catalogItemId, partnerId)
	{
		changeStatus(
			catalogItemId,

			<?php echo Kaltura_Client_Reach_Enum_VendorCatalogItemStatus::ACTIVE; ?>,
			partnerId,
			function() {
				alert('<?php echo $this->translate('Catalog Item enabled');?>');
			}
		);
	}

	function disable(catalogItemId,partnerId)
	{
		changeStatus(
			catalogItemId,
			<?php echo Kaltura_Client_Reach_Enum_VendorCatalogItemStatus::DISABLED; ?>,
			partnerId,
			function() {
				alert('<?php echo $this->translate('Catalog Item disabled');?>');
			}
		);
	}

	function remove(catalogItemId,partnerId)
	{
		var ok = confirm('<?php echo $this->translate('Are you sure you want to remove Catalog Item ?'); ?>');
		if (ok)
		{
			changeStatus(
				catalogItemId,
				<?php echo Kaltura_Client_Reach_Enum_VendorCatalogItemStatus::DELETED; ?>,
				partnerId,
				function() {
					alert('<?php echo $this->translate('Catalog Item removed');?>');
				}
			);
		}
	}

	function changeStatus(catalogItemId, status, partnerId, callback)
	{
		var url = '<?php echo $this->url(array('controller' => 'plugin', 'action' => 'CatalogItemSetStatusAction', 'catalogItemId' => 'CATALOGITEMID','partnerId' => 'PARTNERID', 'catalogItemStatus' => 'STATUS')); ?>';
		url = url.replace('STATUS', status);
		url = url.replace('CATALOGITEMID', catalogItemId);
		url = url.replace('PARTNERID', partnerId);
		jQuery.ajax({
			url: url,
			dataType: 'json',
			success: function(result) {
				if (result != 'ok')
					this.error(result);
				else
				{
					if (callback && (typeof callback == 'function'))
					{
						callback.apply(this);
					}
				}
				jQuery('#frmPaginator1').submit();
			},
			error: function(result) {
				alert(result);
			}
		});
	}


	function addNewCatalogItem(partnerId, catalogItemType)
	{
		if(!partnerId.length || isNaN(partnerId)){
			alert('<?php echo $this->translate('Publisher ID not supplied'); ?>');
			return;
		}

		if(!catalogItemType || !catalogItemType.length || catalogItemType == 'NONE'){
			alert('<?php echo $this->translate('Catalog item type not supplied'); ?>');
			return;
		}

		var paramsStr = '/new_partner_id/' + partnerId + '/new_catalog_item_type/' + catalogItemType;

		loadCatalogItem(paramsStr);
	}

	function configureCatalogItem(catalogItemId)
	{
		if(typeof catalogItemId == 'undefined'){
			alert('<?php echo $this->translate('Catalog Item ID not supplied'); ?>');
			return;
		}

		var catalogItemIdStr = '/catalog_item_id/' + catalogItemId;

		var url = '<?php echo $this->url(array('controller' => 'plugin', 'action' => 'CatalogItemConfigureAction', 'catalogItemPricingClz' => 'Null')); ?>' + catalogItemIdStr;

		jQuery('#catalog-item-configure-dialog').remove();
		dialogDiv = jQuery('<div id="catalog-item-configure-dialog"><?php echo $this->translate('Loading...'); ?></div>').appendTo('body');

		dialogDiv.dialog({
			bgiframe: true,
			modal: true,
			resizable: false,
			width: 600,
			height: 600,
			title: '<?php echo $this->translate('Catalog Item'); ?>',
			buttons: {
				'<?php echo $this->translate('Save'); ?>': function() {
					loadSourceLanguages();
					loadTargetLanguages();
					loadOutputFormats();
					jQuery(this).find('#frmCatalogItemConfigure').submit();
				},
				'<?php echo $this->translate('Close'); ?>': function() {
					jQuery(this).dialog('close');
				}
			},
			close: function() {
				jQuery(this).dialog('destroy').remove();
			}
		});

		dialogDiv.load(
			url,
			null,
			function() {
				jQuery(this).find('#frmCatalogItemConfigure').ajaxForm({
					success: loadCatalogItemSuccess,
					iframe: true
				});
			}
		);
	}


	function cloneCatalogItemTemplate(partnerId , cloneTemplateId) {
		if(!partnerId.length || isNaN(partnerId)){
			alert('<?php echo $this->translate('Publisher ID not supplied'); ?>');
			return;
		}

		if(!cloneTemplateId || !cloneTemplateId.length){
			alert('<?php echo $this->translate('Catalog Template was not supplied'); ?>');
			return;
		}

		var paramsStr1 = '/new_partner_id/' + partnerId + '/clone_template_id/' + cloneTemplateId;

		var url = '<?php echo $this->url(array('controller' => 'plugin', 'action' => 'CatalogItemConfigureAction', 'catalogItemPricingClz' => 'Null')); ?>' + paramsStr1;

		jQuery('#catalog-item-configure-dialog').remove();
		dialogDiv = jQuery('<div id="catalog-item-configure-dialog"><?php echo $this->translate('Loading...'); ?></div>').appendTo('body');

		dialogDiv.dialog({
			bgiframe: true,
			modal: true,
			resizable: false,
			width: 600,
			height: 600,
			title: '<?php echo $this->translate('Catalog Item Template Setup Configuration'); ?>',
			buttons: {
				'<?php echo $this->translate('Save'); ?>': function() {
					jQuery('.ui-widget-overlay').css('z-index', 1003 );
					jQuery('#loader').show();
					loadSourceLanguages();
					loadTargetLanguages();
					loadOutputFormats();
					jQuery(this).find('#frmCatalogItemConfigure').submit();
				},
				'<?php echo $this->translate('Close'); ?>': function() {
					jQuery(this).dialog('close');
				}
			},
			close: function() {
				jQuery(this).dialog('destroy').remove();
			}
		});

		dialogDiv.load(
			url,
			null,
			function() {
				jQuery('#frmCatalogItemConfigure').ajaxForm({
					success: loadCatalogItemSuccess,
					iframe: true
				});
			}
		);
	}

	function loadCatalogItem(paramStr)
	{
		var url = '<?php echo $this->url(array('controller' => 'plugin', 'action' => 'CatalogItemConfigureAction', 'catalogItemPricingClz' => 'Null')); ?>' + paramStr;

		jQuery('#catalog-item-configure-dialog').remove();
		dialogDiv = jQuery('<div id="catalog-item-configure-dialog"><?php echo $this->translate('Loading...'); ?></div>').appendTo('body');

		dialogDiv.dialog({
			bgiframe: true,
			modal: true,
			resizable: false,
			width: 600,
			height: 600,
			title: '<?php echo $this->translate('Catalog Item'); ?>',
			buttons: {
				'<?php echo $this->translate('Save'); ?>': function() {
					jQuery('.ui-widget-overlay').css('z-index', 1003 );
					jQuery('#loader').show();
					loadSourceLanguages();
					loadTargetLanguages();
					loadOutputFormats();
					jQuery(this).find('#frmCatalogItemConfigure').submit();
				},
				'<?php echo $this->translate('Close'); ?>': function() {
					jQuery(this).dialog('close');
				}
			},
			close: function() {
				jQuery(this).dialog('destroy').remove();
			}
		});

		dialogDiv.load(
			url,
			null,
			function() {
				jQuery(this).find('#frmCatalogItemConfigure').ajaxForm({
					success: loadCatalogItemSuccess,
					iframe: true
				});
			}
		);
	}

	function loadOutputFormats() {
		//remove all template field
		$('fieldset[id^="OutputFormatTemplate"]').remove();
		setOutputFormatData();
	}

	function loadTargetLanguages() {
		//remove all template field
		$('fieldset[id^="TargetLanguageTemplate"]').remove();
		setTargetLanguageData();
	}

	function loadSourceLanguages() {
		//remove all template field
		$('fieldset[id^="SourceLanguageTemplate"]').remove();
		setSourceLanguageData();
	}


	function setOutputFormatData() {
		var conditions = [];
		var currentIndex = 0;
		while (jQuery('#OutputFormat_' + currentIndex.toString()).length > 0) {
			conditions.push(buildOutputFormatsParams(currentIndex));
			currentIndex++;
		}
		jQuery('#OutputFormats').val(JSON.stringify(conditions));
	}

	function setSourceLanguageData() {
		var conditions = [];
		var currentIndex = 0;
		while (jQuery('#SourceLanguage_' + currentIndex.toString()).length > 0) {
			conditions.push(buildSourceLanguageParams(currentIndex));
			currentIndex++;
		}
		jQuery('#SourceLanguages').val(JSON.stringify(conditions));
	}

	function setTargetLanguageData() {
		var conditions = [];
		var currentIndex = 0;
		while (jQuery('#TargetLanguage_' + currentIndex.toString()).length > 0) {
			conditions.push(buildTargetLanguageParams(currentIndex));
			currentIndex++;
		}
		jQuery('#TargetLanguages').val(JSON.stringify(conditions));
	}


	function buildOutputFormatsParams(index) {
		var cond = {};
		jQuery('#OutputFormat_' + index).find('input,select').each(function(idx) {
			var type = $( this ).attr("type");
			var name = $( this ).attr("name");
			var val = $( this ).val();
			if (type == 'hidden')
				return;
			cond[name] = val;
			$(this).remove();
		});
		return cond;
	}


	function buildSourceLanguageParams(index) {
		var cond = {};
		jQuery('#SourceLanguage_' + index).find('input,select').each(function(idx) {
			var type = $( this ).attr("type");
			var name = $( this ).attr("name");
			var val = $( this ).val();
			if (type == 'hidden')
				return;
			cond[name] = val;
			$(this).remove();
		});
		return cond;
	}

	function buildTargetLanguageParams(index) {
		var cond = {};
		jQuery('#TargetLanguage_' + index).find('input,select').each(function(idx) {
			var type = $( this ).attr("type");
			var name = $( this ).attr("name");
			var val = $( this ).val();
			if (type == 'hidden')
				return;

			cond[name] = val;
			$(this).remove();
		});
		return cond;
	}

	function loadCatalogItemSuccess(html) {
		if (jQuery(html).filter('#frmCatalogItemConfigure').hasClass('valid'))
		{
			dialogDiv.dialog('close');
			if (jQuery('#frmPaginator1').length){
				jQuery('#frmPaginator1').submit();
			}
			else {
				jQuery('#frmPartnerIdFilter').submit();
			}
		}
		jQuery('.ui-widget-overlay').css('z-index', 1000 );
		jQuery('#loader').hide();
		jQuery('#frmCatalogItemConfigure').replaceWith(html);
		jQuery('#frmCatalogItemConfigure').ajaxForm({
			success: loadCatalogItemSuccess,
			iframe: true
		});
	}

	function replaceCatalogPricingForm() {

		var catalogItemPricingClz = jQuery('#catalogItemPricing-objectType').val();
		var url = '<?php echo $this->url(array('controller' => 'delivery', 'action' => 'get-catalog-item-pricing-form', 'catalogItemPricingClz' => 'PRICINGCLS')); ?>';
		url = url.replace('PRICINGCLS', catalogItemPricingClz);

		subform = jQuery('#catalogItemPricing-element');
		subform.load(
			url,
			null,
			function(html) {
				jQuery('#catalogItemPricing-element').replaceWith(jQuery.parseHTML(html)[1]);
				jQuery('#catalogItemPricing-objectType').change(replaceCatalogPricingForm);
			}
		);
	}

	jQuery('#catalogItemPricing-objectType').change(replaceCatalogPricingForm);


</script>

