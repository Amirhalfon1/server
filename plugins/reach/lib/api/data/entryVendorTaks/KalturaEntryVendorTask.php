<?php
/**
 * @package plugins.reach
 * @subpackage api.objects
 */
class KalturaEntryVendorTask extends KalturaObject implements IFilterable
{
	/**
	 * @var int
	 * @readonly
	 * @filter eq,in,order
	 */
	public $id;
	
	/**
	 * @var int
	 * @readonly
	 */
	public $partnerId;
	
	/**
	 * @var int
	 * @readonly
	 */
	public $vendorPartnerId;
	
	/**
	 * @var time
	 * @readonly
	 * @filter gte,lte,order
	 */
	public $createdAt;
	
	/**
	 * @var time
	 * @readonly
	 * @filter gte,lte,order
	 */
	public $updatedAt;
	
	/**
	 * @var time
	 * @readonly
	 * @filter gte,lte,order
	 */
	public $queuedAt;
	
	/**
	 * @var time
	 * @readonly
	 * @filter gte,lte,order
	 */
	public $finishedAt;
	
	/**
	 * @var string
	 * @filter eq
	 */
	public $entryId;
	
	/**
	 * @var KalturaEntryVendorTaskStatus
	 * @filter eq,in
	 */
	public $status;
	
	/**
	 * The catalog item Id containing the task description 
	 * @var int
	 * @filter eq,in
	 */
	public $catalogItemId;
	
	/**
	 * The charged price to execute this task
	 * @var int
	 * @readonly
	 */
	public $price;
	
	/**
	 * The ID of the user who created this task
	 * @var string
	 * @filter eq,in,notin
	 */
	public $userId;
	
	/**
	 * The user ID that approved this task for execution (in case moderation is requested)
	 * @var string
	 * @filter eq,in,notin
	 */
	public $approvedBy;
	
	/**
	 * Err description provided by provider in case job execution has failed
	 * @var string
	 */
	public $ErrDescription;
	
	/**
	 * Access key generated by Kaltura to allow vendors to ingest the end result to the destination
	 * @var string
	 */
	public $accessKey;
	
	/**
	 * User generated notes that should be taken into account by the vendor while executing the task
	 * @var string
	 */
	public $notes;
	
	private static $map_between_objects = array
	(
		'id',
		'createdAt',
	);
	
	/* (non-PHPdoc)
	 * @see KalturaCuePoint::getMapBetweenObjects()
	 */
	public function getMapBetweenObjects()
	{
		return array_merge(parent::getMapBetweenObjects(), self::$map_between_objects);
	}
	
	/* (non-PHPdoc)
 	 * @see KalturaObject::toInsertableObject()
 	 */
	public function toInsertableObject($object_to_fill = null, $props_to_skip = array())
	{
		if (is_null($object_to_fill))
			$object_to_fill = new VendorProfile();
		
		return parent::toInsertableObject($object_to_fill, $props_to_skip);
	}
	
	public function validateForInsert($propertiesToSkip = array())
	{
		$this->validate();
		return parent::validateForInsert($propertiesToSkip);
	}
	
	public function validateForUpdate($sourceObject, $propertiesToSkip = array())
	{
		$this->validate($sourceObject);
		return parent::validateForUpdate($sourceObject, $propertiesToSkip);
	}
	
	private function validate(VendorProfile $sourceObject = null)
	{
//		if(!$sourceObject) //Source object will be null on insert
//			$this->validatePropertyNotNull(array("vendorPartnerId", "serviceType", "turnAroundTime", "pricing"));
//		
//		$this->validateVendorPartnerId($sourceObject);
//		$this->validateSystemName($sourceObject);
		return;
	}
	
	public function getExtraFilters()
	{
		return array();
	}
	
	public function getFilterDocs()
	{
		return array();
	}
}
